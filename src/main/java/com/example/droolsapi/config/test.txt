// ===== Driver-only test: build KieSession, insert two facts, fire rules =====
import java.sql.Date
import java.time.LocalDate

// Short aliases for Java boxed types to match your constructor exactly
type JInt   = java.lang.Integer
type JLong  = java.lang.Long
type JFloat = java.lang.Float
type JDouble= java.lang.Double

// 1) Get KieContainer from your config, then create a session
val kc = CommonDataObject.MyDroolsConfig.kieContainer()
val ks = kc.newKieSession()

// 2) Build two facts that satisfy your A1CIPRiskRule:
//    - SCORE fact: mem_name="INDV_SCOR_FACT", scor_typ_cd="FUT_RSK_IN", scor_val>=3.0
//    - ELEMENT fact: mem_name="INDV_ELEMENTS_LAB", elem_nbr=478, elem_dt_1 within last 90d

def sqlDate(daysAgo: Long): Date =
  Date.valueOf(LocalDate.now().minusDays(daysAgo))

// Constructor order in your CommonDataModel (from your code):
// indv_id:Int, elem_nbr:Int, elem_qty:Double, age:Int, mem_name:String,
// elem_dt_1:Date, elem_dt_2:Date, scor_typ_cd:String, scor_val:Float,
// prg_srvc_id:Int, trm_dt:Date, eff_dt:Date, dft_dt:Date,
// st_abbr_cd:String, optum_seg_id:Int, id_run_dt:Date, outbound_file_id:Int,
// scen_rule_cd:String, dob:Date, effective_date:Date, end_date:Date,
// med_dx_of_interest:String, scenario_cd:String, next_effective_date:Date,
// grace_period:Int, min_eff_date:Date, max_end_date:Date, final_end_date:Date,
// adt_chief_complaint:String, elem_sup:String, continuity:String,
// med_cov:Float, rel_iprnt_risk_12_mo_nbr:Float

// --- SCORE fact ---
val score = new CommonDataObject.CommonDataModel(
  new JInt(1),               // indv_id
  new JInt(999),             // elem_nbr (unused in rule)
  new JDouble(1.0),          // elem_qty
  new JInt(35),              // age
  "INDV_SCOR_FACT",          // mem_name
  null,                      // elem_dt_1
  null,                      // elem_dt_2
  "FUT_RSK_IN",              // scor_typ_cd
  new JFloat(3.5f),          // scor_val  >= 3.0
  new JInt(123),             // prg_srvc_id
  null, null, null,          // trm_dt, eff_dt, dft_dt
  "TX",                      // st_abbr_cd
  new JInt(0),               // optum_seg_id
  null,                      // id_run_dt
  new JInt(0),               // outbound_file_id
  "RULECD",                  // scen_rule_cd
  null, null, null,          // dob, effective_date, end_date
  null,                      // med_dx_of_interest
  "SCN",                     // scenario_cd
  null,                      // next_effective_date
  new JInt(0),               // grace_period
  null, null, null,          // min_eff_date, max_end_date, final_end_date
  null,                      // adt_chief_complaint
  null,                      // elem_sup
  null,                      // continuity
  new JFloat(0.0f),          // med_cov
  new JFloat(0.0f)           // rel_iprnt_risk_12_mo_nbr
)

// --- ELEMENT fact (elem_dt_1 inside last 90 days) ---
val elem = new CommonDataObject.CommonDataModel(
  new JInt(1),               // same indv_id to “join” logically
  new JInt(478),             // elem_nbr = 478
  new JDouble(1.0),          // elem_qty
  new JInt(35),              // age
  "INDV_ELEMENTS_LAB",       // mem_name
  sqlDate(60),               // elem_dt_1 -> 60 days ago (inside 90-day window)
  null,                      // elem_dt_2
  null,                      // scor_typ_cd
  null.asInstanceOf[JFloat], // scor_val
  new JInt(123),             // prg_srvc_id
  null, null, null,          // trm_dt, eff_dt, dft_dt
  "TX",                      // st_abbr_cd
  new JInt(0),               // optum_seg_id
  null,                      // id_run_dt
  new JInt(0),               // outbound_file_id
  "RULECD",                  // scen_rule_cd (any)
  null, null, null,          // dob, effective_date, end_date
  null,                      // med_dx_of_interest
  "SCN",                     // scenario_cd
  null,                      // next_effective_date
  new JInt(0),               // grace_period
  null, null, null,          // min_eff_date, max_end_date, final_end_date
  null,                      // adt_chief_complaint
  null,                      // elem_sup
  null,                      // continuity
  new JFloat(0.0f),          // med_cov
  new JFloat(0.0f)           // rel_iprnt_risk_12_mo_nbr
)

// 3) Insert and fire
ks.insert(score)
ks.insert(elem)
val fired = ks.fireAllRules()
println(s"Fired rules: $fired")

// 4) Collect CommonDataResultSet emitted by your rules
val out = ks.getObjects().toArray.collect {
  case o if o.getClass.getName == "CommonDataObject.CommonDataResultSet" =>
    o.asInstanceOf[CommonDataObject.CommonDataResultSet].getStatus()
}
ks.dispose()

println("Statuses: " + out.mkString(", "))
