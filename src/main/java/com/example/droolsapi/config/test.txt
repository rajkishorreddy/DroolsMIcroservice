%scala
def find(name: String) =
  Option(Thread.currentThread.getContextClassLoader.getResource(name))
    .map(_.toString).getOrElse("MISSING")

println("kmodule.xml  => " + find("META-INF/kmodule.xml"))
println("KieServices  => " + find("META-INF/services/org.kie.api.KieServices"))
println("KieContainer => " + find("META-INF/services/org.kie.api.runtime.KieContainer"))  // may be absent depending on version
println("rules folder => " + find("rules/A1CIPRiskRule.drl"))  // adjust if your file name differs



%scala
import org.kie.api.KieServices

try {
  val ks = KieServices.Factory.get()
  println(s"ks => $ks")
  val kc = ks.getKieClasspathContainer()
  println("kBases: " + kc.getKieBaseNames)
  val ksession = kc.newKieSession("rulesKSession")  // name from your kmodule.xml
  println("ksession OK -> " + ksession)
  ksession.dispose()
} catch {
  case t: Throwable =>
    t.printStackTrace()
}




