# === Class accessibility diagnostic ===
candidates = [
    "MyDroolsConfig",                         # default package
    "CommonDataObject.MyDroolsConfig",        # in CommonDataObject package
    "handlers.MyDroolsConfig",                # in handlers package
]

jvm = spark._jvm
gw  = spark.sparkContext._gateway

def dotted_getattr(root, dotted):
    cur = root
    for part in dotted.split("."):
        if not hasattr(cur, part):
            return None
        cur = getattr(cur, part)
    return cur

def try_candidate(fqn):
    print(f"\n=== Trying: {fqn} ===")
    # 1) Py4J attribute access
    obj = dotted_getattr(jvm, fqn)
    print("Py4J attr:", type(obj).__name__, obj)

    # 2) java.lang.Class.forName
    try:
        Cls = jvm.java.lang.Class.forName(fqn)
        print("forName: OK ->", Cls)
    except Exception as e:
        print("forName: FAIL ->", str(e)[:120])

    # 3) ContextClassLoader.loadClass + method check
    try:
        cl = jvm.java.lang.Thread.currentThread().getContextClassLoader()
        Cls2 = cl.loadClass(fqn)
        print("loadClass: OK ->", Cls2)
        # try to find kieContainer()
        methods = [m.getName() for m in Cls2.getDeclaredMethods()]
        print("has kieContainer():", "kieContainer" in methods)
    except Exception as e:
        print("loadClass: FAIL ->", str(e)[:120])

for fqn in candidates:
    try_candidate(fqn)
