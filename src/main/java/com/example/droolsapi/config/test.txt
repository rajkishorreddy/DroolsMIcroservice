%scala
val sess = buildSessionFromFolderVerbose("dbfs:/FileStore/rules")
println("Loaded DRLs -> OK")



%scala
import java.sql.Date
import CommonDataObject.{CommonDataModel, CommonDataResultSet}
import scala.collection.JavaConverters._

def d(s: String): java.sql.Date = Date.valueOf(s)

val indv = 12345: java.lang.Integer

// ---------- AdolescentImmuneRule Facts ----------
val a = new CommonDataModel()
a.setIndv_id(indv)
a.setDob(d("2013-08-15")) // so ageInDecimals=true

val b = new CommonDataModel()
b.setIndv_id(indv)
b.setContinuity("365D_Continuous")
b.setEffective_date(d("2024-01-01"))
b.setMax_end_date(d("2023-12-31"))
b.setMin_eff_date(d("2023-01-01"))
b.setFinal_end_date(d("2024-12-31"))
b.setGrace_period(400: java.lang.Integer)

val c = new CommonDataModel()
c.setIndv_id(indv)
c.setElem_nbr(3327: java.lang.Integer)
c.setMem_name("INDV_ELEMENTS_ATTR_EG")
c.setContinuity("365D_Continuous")

// ---------- AsthmaRule Facts ----------
val p = new CommonDataModel()
p.setIndv_id(indv)
p.setAge(25: java.lang.Integer)
p.setElem_nbr(3018: java.lang.Integer)
p.setMem_name("INDV_ELEMENTS_ATTR_EG")

val q = new CommonDataModel()
q.setIndv_id(indv)
q.setElem_nbr(1125: java.lang.Integer)
q.setMem_name("INDV_ELEMENTS_EBM")

val r = new CommonDataModel()
r.setIndv_id(indv)
r.setElem_nbr(1021: java.lang.Integer)
r.setMem_name("INDV_ELEMENTS_ADJ")

// (do not create the 3019 blocking fact)

// ---------- Execute ----------
val outs = runRuleAndCollectMany(Seq(a,b,c,p,q,r))
println("OUTS -> " + outs.mkString(", "))
