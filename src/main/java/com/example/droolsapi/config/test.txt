// keep your imports (incl. ClassObjectFilter) above

case class Out(indvId: Long, ruleNum: String, ruleFlag: Boolean, isActive: String)

def fire(facts: Seq[CommonDataObject.CommonDataModel]): Seq[Out] = {
  result.clear()
  sess.execute(facts.asJava)
  // capture CommonDataResultSet produced by the rules
  sess.execute(new java.util.ArrayList[Object](), new org.kie.api.runtime.ClassObjectFilter(classOf[CommonDataObject.CommonDataResultSet]))

  Seq(
    Out(
      facts.headOption
        .flatMap(m => Option(m.getIndv_id()).map(_.longValue()))  // Integer -> Long, null-safe
        .getOrElse(-1L),
      Option(result.get("ruleNum")).map(_.toString).getOrElse("NA"),
      Option(result.get("ruleFlag")).exists(_.toString.equalsIgnoreCase("true")),
      Option(result.get("isActive")).map(_.toString).getOrElse("Y")
    )
  )
}

// ---- group by INDV_ID (null-safe) and fire once per INDV_ID ----
val outs: Seq[Out] =
  testFacts
    .groupBy(m => Option(m.getIndv_id()).map(_.longValue()).getOrElse(-1L)) // key: Long
    .values                                    // Iterable[Seq[CommonDataModel]]
    .toSeq
    .flatMap(fire)

// sanity print
println(s"ðŸ”¥ Fired groups: ${outs.size}")
outs.take(10).foreach(println)
