def buildDroolsSessionFromDbfsRules(ruleDirDbfs: String): StatelessKieSession = {
  val ks = KieServices.Factory.get
  val kfs = ks.newKieFileSystem()

  dbutils.fs.ls(ruleDirDbfs)
    .filter(_.name.toLowerCase.endsWith(".drl"))
    .foreach { f =>
      val body = dbutils.fs.head(f.path)
      kfs.write(
        f.path,
        ResourceFactory
          .newByteArrayResource(body.getBytes("UTF-8"))
          .setResourceType(ResourceType.DRL)
      )
    }

  val kbuilder: KieBuilder = ks.newKieBuilder(kfs).buildAll()
  val results: Results = kbuilder.getResults
  if (results.hasMessages(Message.Level.ERROR)) {
    println("❌ DROOLS BUILD ERRORS:")
    results.getMessages(Message.Level.ERROR).forEach(m => println(s"  -> $m"))
    throw new IllegalStateException("Rule build failed, fix DRL")
  }
  val kbase = ks.newKieContainer(ks.getRepository.getDefaultReleaseId).getKieBase
  val session = kbase.newStatelessKieSession()
  val globalMap = new java.util.HashMap[String, Object]()
  session.setGlobal("result", globalMap)
  session
}

def buildSessionFromBundle(bundle: RuleBundle): StatelessKieSession = {
  val ks = KieServices.Factory.get
  val kfs = ks.newKieFileSystem()

  bundle.drlFiles.foreach { case (path, body) =>
    kfs.write(
      path,
      ResourceFactory
        .newByteArrayResource(body.getBytes("UTF-8"))
        .setResourceType(ResourceType.DRL)
    )
  }

  val kbuilder: KieBuilder = ks.newKieBuilder(kfs).buildAll()
  val results: Results = kbuilder.getResults
  if (results.hasMessages(Message.Level.ERROR)) {
    val msgs = results.getMessages(Message.Level.ERROR).asScala.mkString("\n")
    throw new IllegalStateException("Executor rule build failed:\n" + msgs)
  }

  val kbase = ks.newKieContainer(ks.getRepository.getDefaultReleaseId).getKieBase
  val sess = kbase.newStatelessKieSession()
  val g = new java.util.HashMap[String, Object]()
  sess.setGlobal("result", g)
  sess
}
