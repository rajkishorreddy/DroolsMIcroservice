%scala
import java.sql.Date
import scala.collection.JavaConverters._
import CommonDataObject.{CommonDataModel, CommonDataResultSet}
import org.kie.api.runtime.ClassObjectFilter

case class Out(indvId: Long, ruleNum: String, ruleFlag: Boolean, isActive: String)

def runRuleAndCollectMany(facts: Seq[CommonDataModel]): Seq[Out] = {
  val ksession = kieBase.newKieSession()
  try {
    facts.foreach(ksession.insert)
    val fired = ksession.fireAllRules()
    println(s"Fired $fired rules")
    val outObjs = ksession
      .getObjects(new ClassObjectFilter(classOf[CommonDataResultSet]))
      .asScala.toSeq.map(_.asInstanceOf[CommonDataResultSet])

    outObjs.map { o =>
      Out(
        indvId   = Option(o.getIndv_id).map(_.toLong).getOrElse(0L),
        ruleNum  = Option(o.getStatus).getOrElse("NA"),
        ruleFlag = true,
        isActive = "Y"
      )
    }
  } finally ksession.dispose()
}

def d(s: String) = Date.valueOf(s)

val indv = 12345: java.lang.Integer

// --- Fact A: adolescent (ageInDecimals == true)
val a = new CommonDataModel()
a.setIndv_id(indv)
a.setDob(d("2012-06-15"))

// --- Fact B: long continuous period (adjustedFinalDate >= 320)
val b = new CommonDataModel()
b.setIndv_id(indv)
b.setContinuity("365D_Continuous")
b.setEffective_date(d("2024-01-01"))
b.setMax_end_date(d("2023-12-31"))
b.setMin_eff_date(d("2023-01-01"))
b.setFinal_end_date(d("2024-12-31"))
b.setGrace_period(400: java.lang.Integer)

// --- Fact C: qualifying evidence
val c = new CommonDataModel()
c.setIndv_id(indv)
c.setElem_nbr(3327: java.lang.Integer)
c.setMem_name("INDV_ELEMENTS_ATTR_EG")
c.setContinuity("365D_Continuous")

// ðŸš« Do NOT add 1678 or 1679 lines

val outs = runRuleAndCollectMany(Seq(a, b, c))
println("OUTS -> " + outs.mkString(", "))
