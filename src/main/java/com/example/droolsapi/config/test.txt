%scala
import org.kie.api.KieServices
import org.kie.api.builder.{KieBuilder, Message, Results}
import org.kie.internal.io.ResourceFactory
import org.kie.api.runtime.StatelessKieSession
import java.nio.charset.StandardCharsets
import java.sql.Date
import scala.collection.JavaConverters._
import CommonDataObject.{CommonDataModel, CommonDataResultSet}

// === Build Drools session ===
def buildSessionFromFolderVerbose(dirDbfs: String): StatelessKieSession = {
  val ks = KieServices.Factory.get
  val kfs = ks.newKieFileSystem()
  val dirLocal = dirDbfs.replace("dbfs:/", "/dbfs/")
  val drlFiles = new java.io.File(dirLocal).listFiles.filter(f => f.isFile && f.getName.endsWith(".drl"))
  println(s"🧩 Found DRLs: ${drlFiles.map(_.getName).mkString(", ")}")

  drlFiles.foreach { f =>
    val body = scala.io.Source.fromFile(f, "UTF-8").mkString
    kfs.write(ResourceFactory
      .newByteArrayResource(body.getBytes(StandardCharsets.UTF_8))
      .setSourcePath(s"rules/${f.getName}"))
  }

  val kb: KieBuilder = ks.newKieBuilder(kfs).buildAll()
  val res: Results = kb.getResults
  if (res.hasMessages(Message.Level.ERROR)) {
    println("❌ Build errors:")
    res.getMessages(Message.Level.ERROR).forEach(m => println("  " + m))
    throw new IllegalStateException("DRL compile failed")
  }

  ks.newKieContainer(ks.getRepository.getDefaultReleaseId)
    .getKieBase
    .newStatelessKieSession()
}

def d(s: String): java.sql.Date = Date.valueOf(s)
val sess = buildSessionFromFolderVerbose("dbfs:/FileStore/rules")
println("✅ Drools Session Loaded")

// === Dummy facts ===
val indv = 12345: java.lang.Integer

// Adolescent rule
val a = new CommonDataModel()
a.setIndv_id(indv)
a.setDob(d("2013-08-15"))

val b = new CommonDataModel()
b.setIndv_id(indv)
b.setContinuity("365D_Continuous")
b.setEffective_date(d("2024-01-01"))
b.setMax_end_date(d("2023-12-31"))
b.setMin_eff_date(d("2023-01-01"))
b.setFinal_end_date(d("2024-12-31"))
b.setGrace_period(400: java.lang.Integer)

val c = new CommonDataModel()
c.setIndv_id(indv)
c.setElem_nbr(3327: java.lang.Integer)
c.setMem_name("INDV_ELEMENTS_ATTR_EG")
c.setContinuity("365D_Continuous")

// Asthma rule
val p = new CommonDataModel()
p.setIndv_id(indv)
p.setAge(25: java.lang.Integer)
p.setElem_nbr(3018: java.lang.Integer)
p.setMem_name("INDV_ELEMENTS_ATTR_EG")

val q = new CommonDataModel()
q.setIndv_id(indv)
q.setElem_nbr(1125: java.lang.Integer)
q.setMem_name("INDV_ELEMENTS_EBM")

val r = new CommonDataModel()
r.setIndv_id(indv)
r.setElem_nbr(1021: java.lang.Integer)
r.setMem_name("INDV_ELEMENTS_ADJ")

// === Helper case class and executor ===
case class Out(indvId: Long, ruleNum: String, ruleFlag: Boolean, isActive: String)

def runRuleAndCollectMany(facts: Seq[CommonDataModel]): Seq[Out] = {
  val factsList = new java.util.ArrayList[Object]()
  facts.foreach(factsList.add)
  
  // Execute once and capture results
  val inserted = new java.util.ArrayList[Object]()
  sess.execute(factsList)
  factsList.asScala.collect {
    case r: CommonDataResultSet =>
      Out(indv.longValue, Option(r.getStatus).getOrElse("NA"), true, "Y")
  }.toSeq
}

// === Execute all ===
val outs = runRuleAndCollectMany(Seq(a, b, c, p, q, r))

println("\n🚀 RULE EXECUTION RESULTS 🚀")
outs.foreach(o => println(s"→ INDV: ${o.indvId}, STATUS: ${o.ruleNum}, ACTIVE: ${o.isActive}"))
println(s"\n✅ TOTAL RULES FIRED: ${outs.size}")
